# Simplified CI Workflow for UltraCoach
# Addresses hanging issues by reducing complexity and improving error handling

name: CI (Simplified)

on:
  push:
    branches: [main, fix/ci-test-user-setup]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ultracoach_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ultracoach_test
      NODE_ENV: test
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: http://localhost:3001
      NEXT_PUBLIC_BASE_URL: http://localhost:3001
      # Mock Supabase values for testing
      NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
      NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key
      SUPABASE_SERVICE_ROLE_KEY: mock-service-role-key
      RESEND_API_KEY: test-key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database schema
        run: |
          echo "Setting up database schema..."
          pnpm drizzle-kit push --verbose
          echo "Database schema ready"
        timeout-minutes: 2

      - name: Start application
        run: |
          echo "Starting Next.js application..."
          pnpm dev &
          echo $! > .next_pid
          echo "App started in background"
        timeout-minutes: 1

      - name: Wait for application
        run: |
          echo "Waiting for application to be ready..."
          for i in {1..30}; do
            if curl -f -s http://localhost:3001/api/health >/dev/null 2>&1; then
              echo "Application is ready!"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          echo "Application failed to start within 60 seconds"
          exit 1
        timeout-minutes: 2

      - name: Create test users
        run: |
          echo "Creating test users..."
          pnpm tsx scripts/create-playwright-test-users.ts
          echo "Test users created"
        timeout-minutes: 2

      - name: Seed test data
        run: |
          echo "Seeding test workouts..."
          pnpm tsx scripts/seed-test-workouts.ts
          echo "Test data seeded"
        timeout-minutes: 1

      - name: Run unit tests
        run: pnpm test:run
        timeout-minutes: 5

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium --with-deps
        timeout-minutes: 5

      - name: Run Playwright tests
        run: npx playwright test --max-failures=3 --reporter=line
        timeout-minutes: 10
        env:
          CI: true

      - name: Cleanup
        if: always()
        run: |
          if [ -f .next_pid ]; then
            kill $(cat .next_pid) 2>/dev/null || true
            rm .next_pid
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7
