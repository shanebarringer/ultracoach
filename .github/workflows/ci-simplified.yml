# Simplified CI Workflow for UltraCoach
# Addresses hanging issues by reducing complexity and improving error handling

name: CI (Simplified)

on:
  push:
    branches: [main, fix/ci-test-user-setup]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ultracoach_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ultracoach_test
      NODE_ENV: test
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: http://localhost:3001
      NEXT_PUBLIC_BASE_URL: http://localhost:3001
      # Mock Supabase values for testing
      NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
      NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key
      SUPABASE_SERVICE_ROLE_KEY: mock-service-role-key
      RESEND_API_KEY: test-key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up test database schema
        run: |
          echo "Setting up test database schema..."
          echo "Environment check:"
          echo "  - NODE_ENV: $NODE_ENV"
          echo "  - DATABASE_URL: $(echo $DATABASE_URL | cut -c1-30)..."

          # Apply SQL migrations directly using psql (pre-installed on ubuntu-latest)
          echo "Applying SQL migrations..."
          for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying migration: $migration"
              PGPASSWORD=postgres psql -h localhost -U postgres -d ultracoach_test -f "$migration"
            fi
          done

          echo "✅ Database schema ready"
        timeout-minutes: 5

      - name: Start application
        run: |
          echo "🚀 Starting Next.js application..."
          echo "Environment check:"
          echo "  - NODE_ENV: $NODE_ENV"
          echo "  - PORT: 3001 (forced)"
          echo "  - DATABASE_URL: $(echo $DATABASE_URL | cut -c1-20)..."

          # Start the app in background with explicit port
          PORT=3001 pnpm dev > app.log 2>&1 &
          APP_PID=$!
          echo $APP_PID > .next_pid

          echo "✅ Next.js started with PID: $APP_PID"
          echo "📝 Logs will be written to app.log"

          # Give it a moment to start
          sleep 3

          # Check if process is still running
          if kill -0 $APP_PID 2>/dev/null; then
            echo "✅ Process is running"
          else
            echo "❌ Process died immediately - checking logs:"
            cat app.log || echo "No logs found"
            exit 1
          fi
        timeout-minutes: 2

      - name: Wait for application
        run: |
          echo "Waiting for application to be ready..."
          echo "Checking if Next.js process is running..."
          ps aux | grep next || echo "Next.js process not found"

          # Extended wait time and better error handling for CI
          for i in {1..60}; do
            # First try health endpoint with timeout
            if timeout 5s curl -f -s http://localhost:3001/api/health >/dev/null 2>&1; then
              echo "✅ Health endpoint is ready!"
              
              # Better Auth is ready when the health endpoint works - no separate check needed
              # Better Auth endpoints are at /api/auth/* and don't respond to base /api/auth
              echo "✅ Better Auth endpoints are ready with health check!"
              curl -s http://localhost:3001/api/health | head -3
              exit 0
            fi
            
            # Show more debugging info every 15 attempts  
            if [ $((i % 15)) -eq 0 ]; then
              echo "🔍 Debugging attempt $i/60:"
              echo "  - Port 3001 listening: $(netstat -tlnp 2>/dev/null | grep :3001 || echo 'NOT FOUND')"
              echo "  - Next.js processes: $(pgrep -f 'next' | wc -l)"
              echo "  - Health check: $(timeout 3s curl -s http://localhost:3001/api/health 2>&1 | head -1 || echo 'Failed')"
              echo "  - Recent app logs:"
              tail -5 app.log 2>/dev/null | sed 's/^/    /' || echo "    No logs available"
            fi
            
            echo "Waiting... ($i/60) - checking again in 2s"
            sleep 2
          done

          echo "❌ Application failed to start within 120 seconds"
          echo "🔍 Final debugging info:"
          echo "  - Port 3001 status: $(netstat -tlnp 2>/dev/null | grep :3001 || echo 'PORT NOT LISTENING')"
          echo "  - Process list: $(ps aux | grep -E '(next|node)' | head -5)"
          echo "  - Process PID file: $(cat .next_pid 2>/dev/null || echo 'PID file not found')"
          echo "  - Full app logs:"
          cat app.log 2>/dev/null | tail -20 || echo "No app logs available"
          exit 1
        timeout-minutes: 4

      - name: Create test users
        run: |
          echo "Creating test users..."

          # Retry logic for user creation (CI can be flaky)
          for attempt in {1..3}; do
            echo "👥 Test user creation attempt $attempt/3..."
            
            if timeout 60s pnpm tsx scripts/create-playwright-test-users.ts; then
              echo "✅ Test users created successfully!"
              break
            else
              echo "❌ Test user creation failed (attempt $attempt/3)"
              
              if [ $attempt -eq 3 ]; then
                echo "💥 All test user creation attempts failed"
                echo "🔍 Final debugging info:"
                echo "  - Health check: $(curl -s http://localhost:3001/api/health 2>&1 | head -1 || echo 'Failed')"
                exit 1
              else
                echo "⏳ Waiting 5 seconds before retry..."
                sleep 5
              fi
            fi
          done
        timeout-minutes: 3

      - name: Seed test data
        run: |
          echo "Seeding test workouts..."
          pnpm tsx scripts/seed-test-workouts.ts
          echo "Test data seeded"
        timeout-minutes: 1

      - name: Run unit tests
        run: pnpm test:run
        timeout-minutes: 5

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium --with-deps
        timeout-minutes: 5

      - name: Run Playwright tests
        run: npx playwright test --max-failures=10 --reporter=dot
        timeout-minutes: 15
        env:
          CI: true

      - name: Cleanup
        if: always()
        run: |
          if [ -f .next_pid ]; then
            kill $(cat .next_pid) 2>/dev/null || true
            rm .next_pid
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7
