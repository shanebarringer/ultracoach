# CI Workflow for UltraCoach
#
# ⚠️  SETUP REQUIRED: GitHub Repository Secrets
#
# You MUST set this secret before CI will work:
#
# 1. BETTER_AUTH_SECRET (required for authentication)
#    Generate: openssl rand -hex 32
#    Location: GitHub repo → Settings → Secrets → Actions → New repository secret
#
# The workflow creates a test PostgreSQL database automatically via Docker
# and seeds it with test users through Better Auth API calls.
#
# CI Architecture:
# ├── PostgreSQL service container (postgres:15)
# ├── Database schema from supabase/migrations/*.sql
# ├── Next.js app (built and started on port 3001)
# ├── Test user creation via Better Auth API
# └── Playwright E2E tests (with screenshots/videos on failure)

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  vitest:
    runs-on: ubuntu-latest
    env:
      # Required for Better Auth tests - must be set in GitHub repository secrets
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      NODE_ENV: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install

      - name: Run Vitest tests
        run: pnpm test:run

  playwright:
    # Run Playwright on main branch pushes and PR to fix/playwright-ci-tests branch
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.head_ref == 'fix/playwright-ci-tests' && github.event_name == 'pull_request')
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ultracoach_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test database configuration
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ultracoach_test
      NODE_ENV: test

      # Supabase configuration for testing (use DATABASE_URL instead)
      NEXT_PUBLIC_SUPABASE_URL: postgresql://postgres:postgres@localhost:5432/ultracoach_test
      NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key-for-testing
      SUPABASE_SERVICE_ROLE_KEY: mock-service-role-key-for-testing

      # Test user credentials
      TEST_COACH_EMAIL: testcoach@ultracoach.dev
      TEST_COACH_PASSWORD: TestCoach123!
      TEST_RUNNER_EMAIL: testrunner@ultracoach.dev
      TEST_RUNNER_PASSWORD: TestRunner123!

      # Auth configuration - must be set in GitHub repository secrets
      BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
      BETTER_AUTH_URL: http://localhost:3001
      NEXT_PUBLIC_BASE_URL: http://localhost:3001

      # Email configuration (test mode)
      RESEND_API_KEY: test-key
      RESEND_FROM_EMAIL: test@ultracoach.dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install

      - name: Set up test database schema
        run: |
          echo "Setting up test database schema..."
          # Apply all database migrations in order
          for migration in supabase/migrations/*.sql; do
            echo "Applying migration: $migration"
            PGPASSWORD=postgres psql -h localhost -U postgres -d ultracoach_test -f "$migration"
          done
          echo "Database schema setup complete"

      - name: Build Next.js app
        run: pnpm build

      - name: Start Next.js app in background
        run: |
          pnpm start &
          echo $! > .next_pid
        env:
          PORT: 3001

      - name: Wait for app to be ready
        run: |
          echo "Waiting for Next.js app to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health 2>/dev/null; then
              echo "App is ready!"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          echo "App failed to start!"
          exit 1

      - name: Create test users via Better Auth API
        run: pnpm tsx scripts/create-test-users-via-api.ts

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Run Playwright tests
        run: pnpm test:e2e

      - name: Stop Next.js app
        if: always()
        run: |
          if [ -f .next_pid ]; then
            kill $(cat .next_pid) || true
            rm .next_pid
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 30
